module Navtastic
  # Stores items generated by a definition block
  class Menu
    include Enumerable

    # @return [Array<Item>] the items in this menu
    attr_reader :items

    # @return [Item,nil] the current active item
    attr_reader :current_item

    # Create a new empty menu
    def initialize
      @items = []
      @items_by_url = {}
      @current_item = nil
    end

    # Add a new item at the end of the menu
    #
    # @param name [String]the name to display in the menu
    # @param url [String] the url to link to, if the item is a link
    def item(name, url = nil)
      item = Item.new(self, name, url)

      @items << item
      @items_by_url[item.url] = item if item.url

      # The first item with a url is the default current item
      @current_item = item if @current_item.nil? && item.url

      item
    end

    # Loop over every item in this menu
    #
    # @yield [item]
    # @yieldparam item [Item]
    def each
      @items.each do |item|
        yield item
      end
    end

    # Find an item in this menu matching the url
    #
    # @param url [String] the url of the item
    #
    # @return [Item] if an item with that url exists
    # @return [nil] if the item doens't exist
    def [](url)
      @items_by_url[url]
    end

    # Sets the current active item by url
    #
    # @private
    #
    # @param url [String] the url of the current page
    def current_url!(url)
      @current_item = self[url]
    end
  end
end
